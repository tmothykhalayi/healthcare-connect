### Set environment variables (update IDs after checking your database)
@baseUrl = http://localhost:3000
@patientId = 1
@doctorId = 1
@pharmacyId = 1
@adminId = 1

### --------------------------
### 1. USER CREATION WITH AUTOMATIC ROLE ASSIGNMENT
### --------------------------

### Create a patient user (automatically creates patient profile)
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "test.patient@example.com",
  "password": "password123",
  "firstName": "Test",
  "lastName": "Patient",
  "role": "patient"
}

### Create a doctor user (automatically creates doctor profile)
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "test.doctor@example.com",
  "password": "password123",
  "firstName": "Test",
  "lastName": "Doctor",
  "role": "doctor"
}

### Create an admin user (automatically creates admin profile)
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "test.admin@example.com",
  "password": "password123",
  "firstName": "Test",
  "lastName": "Admin",
  "role": "admin"
}

### Create a pharmacy user (automatically creates pharmacy profile)
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "test.pharmacy@example.com",
  "password": "password123",
  "firstName": "Test",
  "lastName": "Pharmacy",
  "role": "pharmacy"
}

### --------------------------
### 2. VERIFY AUTOMATIC ROLE ASSIGNMENT
### --------------------------

### Get all users to verify creation
GET {{baseUrl}}/users

### Check patient profiles were created automatically
GET {{baseUrl}}/patients

### Check doctor profiles were created automatically
GET {{baseUrl}}/doctors

### Check admin profiles were created automatically
GET {{baseUrl}}/admin

### Check pharmacy profiles were created automatically
GET {{baseUrl}}/pharmacy

### --------------------------
### 3. COMPLETE USER PROFILES
### --------------------------

### Get patient profiles to find the correct ID
GET {{baseUrl}}/patients

### Complete patient profile (update ID from previous step)
PATCH {{baseUrl}}/patients/{{patientId}}
Content-Type: application/json

{
  "gender": "female",
  "dateOfBirth": "1992-03-15",
  "phoneNumber": "15551234567",
  "address": "123 Main St, City, State 12345",
  "emergencyContact": "John Smith - 15559876543",
  "bloodType": "B+",
  "weight": 65.0,
  "height": 170.0
}

### Get doctor profiles to find the correct ID
GET {{baseUrl}}/doctors

### Complete doctor profile (update ID from previous step)
PATCH {{baseUrl}}/doctors/{{doctorId}}
Content-Type: application/json

{
  "specialization": "Neurology",
  "licenseNumber": "MD987654",
  "yearsOfExperience": 8,
  "education": "Medical University",
  "phoneNumber": "15559876543",
  "officeAddress": "456 Medical Plaza, City, State 12345",
  "consultationFee": 180.00,
  "availableDays": ["Monday", "Wednesday", "Friday"],
  "availableHours": "10:00 AM - 6:00 PM"
}

### Get pharmacy profiles to find the correct ID
GET {{baseUrl}}/pharmacy

### Complete pharmacy profile (update ID from previous step)
PATCH {{baseUrl}}/pharmacy/{{pharmacyId}}
Content-Type: application/json

{
  "pharmacyName": "Healing Pharmacy",
  "licenseNumber": "PH456789",
  "address": "789 Health Avenue, City, State 12345",
  "phoneNumber": "15557891234",
  "status": "active"
}

### --------------------------
### 4. CHANGE USER ROLE & TEST REASSIGNMENT
### --------------------------

### Find a user to change role
GET {{baseUrl}}/users

### Change user's role (will create new role-specific record)
PATCH {{baseUrl}}/users/1/role
Content-Type: application/json

{
  "role": "doctor"
}

### Verify user's role was changed
GET {{baseUrl}}/users/1

### Check if doctor profile was created after role change
GET {{baseUrl}}/doctors

### --------------------------
### 5. TEST VALIDATION & ERROR HANDLING
### --------------------------

### Try to create user with invalid role (should fail)
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "invalid.role@example.com",
  "password": "password123",
  "firstName": "Invalid",
  "lastName": "Role",
  "role": "invalidRole"
}

### Try to create duplicate user (should fail)
POST {{baseUrl}}/users
Content-Type: application/json

{
  "email": "test.patient@example.com",
  "password": "password123",
  "firstName": "Duplicate",
  "lastName": "User",
  "role": "patient"
}

### Try to create patient profile with non-patient user ID (should fail)
POST {{baseUrl}}/patients
Content-Type: application/json

{
  "userId": 2,
  "gender": "male",
  "dateOfBirth": "1990-05-15",
  "phoneNumber": "15559876543",
  "address": "123 Main St, City, State 12345"
}

### --------------------------
### 6. USER STATS & FILTERING
### --------------------------

### Get user statistics
GET {{baseUrl}}/users/stats

### Get users by role
GET {{baseUrl}}/users/role/patient
GET {{baseUrl}}/users/role/doctor
GET {{baseUrl}}/users/role/admin
GET {{baseUrl}}/users/role/pharmacy

### Get patients with specific criteria
GET {{baseUrl}}/patients/by-gender/female
GET {{baseUrl}}/patients/by-blood-type/B+
GET {{baseUrl}}/patients/with-allergies

### Get patients by doctor
GET {{baseUrl}}/patients/doctor/{{doctorId}}

### --------------------------
### 7. DELETE & CLEANUP
### --------------------------

### Delete a test user (confirm first)
GET {{baseUrl}}/users/email/test.patient@example.com

### Perform deletion
DELETE {{baseUrl}}/users/email/test.patient@example.com

### Verify deletion - user should be gone
GET {{baseUrl}}/users/email/test.patient@example.com

### Patient profile should also be gone (automatic cascade delete)
GET {{baseUrl}}/patients